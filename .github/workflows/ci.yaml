name: ci



on:
  workflow_dispatch:
  pull_request:
    paths-ignore:
      - '*.md'
      - 'Makefile'
      - 'scans/local_*.yaml'
  push:
    paths-ignore:
      - '*.md'
      - 'Makefile'
      - 'scans/local_*.yaml'



concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_id }}-${{ github.job }}
  cancel-in-progress: true



jobs:
  ci:
    runs-on: ubuntu-latest
    name: Build container image
    strategy:
      matrix:
        IMAGE_NAME: [python]
        IMAGE_BASE: [alpine]



    steps:
      ## ---------- SETUP
      - name: "Install requirements"
        id: install-requirements
        run: |
          requirements=('jq:jq')
          for pkg in "${requirements[@]}"; do
            pkg_name=$(echo ${pkg} | cut -d: -f1)
            bin_name=$(echo ${pkg} | cut -d: -f2)
            which ${bin_name} >/dev/null || sudo apt install -y ${pkg_name}
          done

      - name: "Checkout the code"
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0



      ## ---------- SCAN-FILES
      ## ----- PREPARE
      - name: "Prepare workspace"
        id: prepare-dockerfile
        run: |
          ## Create temp folder to store scan results logs and reports
          WORK_DIR=$(realpath ${PWD})
          MATRIX_PATH="${{ env.IMAGE_BASE }}/${{ env.IMAGE_NAME }}"
          SRC_FOLDER="${WORK_DIR}/src/${MATRIX_PATH}"
          TEMP_FOLDER="${WORK_DIR}/.temp/${MATRIX_PATH}"
          mkdir -p ${TEMP_FOLDER}/{logs,reports}

          ## Compose envfile, replacing shell expansions with its result
          cd ${SRC_FOLDER}
          DOCKERFILE_IMAGE_BASE=$(sed -n 2p Dockerfile | cut -d' ' -f2)
          docker pull -q ${DOCKERFILE_IMAGE_BASE} > /dev/null
          FORMAT_DOCKERFILE_SCRIPT="${WORK_DIR}/scripts/compose-envfile.py"
          python ${FORMAT_DOCKERFILE_SCRIPT} ${SRC_FOLDER}/.env > ${TEMP_FOLDER}/.env

          ## Import environment variables from envfile
          source <(sed -r "s/(^[A-Z])/export \1/g" ${TEMP_FOLDER}/.env)

          echo "WORK_DIR=${WORK_DIR}"       >> ${GITHUB_ENV}
          echo "MATRIX_PATH=${MATRIX_PATH}" >> ${GITHUB_ENV}
          echo "SRC_FOLDER=${SRC_FOLDER}"   >> ${GITHUB_ENV}
          echo "TEMP_FOLDER=${TEMP_FOLDER}" >> ${GITHUB_ENV}
          cat ${TEMP_FOLDER}/.env           >> ${GITHUB_ENV}

      - name: "Check if dockerfile has changes"
        id: check-changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            dockerfiles:
              - 'src/*/*/Dockerfile'



      ## ----- KICS
      - name: "Run Kics to check static code analysis"
        id: scan-kics
        uses: checkmarx/kics-github-action@v1.6
        continue-on-error: true
        if: steps.check-changes.outputs.dockerfiles == 'true'
        with:
          path: src
          type: Dockerfile
          fail-on: 'high,medium,low,info'
          output_path: .temp/${{ env.MATRIX_PATH }}/reports
          output_formats: json,html
          bom: true
          verbose: true

      - name: "Post a comment in a Pull Request with Kics results"
        id: comment-pr-kics
        uses: checkmarx/kics-github-action@v1.6
        if: |
          github.event_name == 'pull_request' &&
          steps.check-changes.outputs.dockerfiles == 'true' &&
          steps.scan-kics.outcome != 'success'
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          enable_comments: true
          verbose: true
          path: .temp/${{ env.MATRIX_PATH }}/reports/results.json

      - name: "Get Kics Scanner results"
        id: get-scan-kics-results
        if: steps.check-changes.outputs.dockerfiles == 'true'
        run: |
          REPORT_FILE=".temp/${{ env.MATRIX_PATH }}/reports/results.json"
          SCAN_KICS_RESULTS=$(jq '.' ${REPORT_FILE})

          echo "# Kics files scan results"                  >> $GITHUB_STEP_SUMMARY
          echo "status: \`${{ steps.scan-kics.outcome }}\`" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                                     >> $GITHUB_STEP_SUMMARY
          echo "${SCAN_KICS_RESULTS}"                       >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                                     >> $GITHUB_STEP_SUMMARY
          echo "---"                                        >> $GITHUB_STEP_SUMMARY

      - name: "Fail kics"
        id: quality-gate-kics
        if: |
          steps.scan-kics.outcome != 'success' &&
          steps.check-changes.outputs.dockerfiles == 'true'
        run: exit 1


      ## ----- TRIVY
      - name: trivy-cache
        id: trivy-files-cache
        uses: actions/cache@v3.2.4
        continue-on-error: true
        with:
          path: /var/cache/trivy
          key: trivy-cache-${{ hashFiles('src/*/*/Dockerfile') }}
          restore-keys: trivy-cache-

      - name: "Run Trivy Scanner on repo files"
        id: scan-trivy-files
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          cache-dir: /var/cache/trivy
          scan-ref: '.'
          scan-type: fs
          output: '.temp/${{ env.MATRIX_PATH}}/reports/trivy-files.json'
          security-checks: 'vuln,secret,config'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'

      - name: "Get Trivy Files Scanner results"
        id: get-scan-trivy-files-results
        run: |
          REPORT_FILE=".temp/${{ env.MATRIX_PATH}}/reports/trivy-files.json"
          SCAN_TRIVY_FILES_RESULTS=$(jq '.' ${REPORT_FILE})

          echo "# Trivy files scan results"                           >> $GITHUB_STEP_SUMMARY
          echo "status: \`${{ steps.scan-trivy-files.outcome }}\`"    >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                                               >> $GITHUB_STEP_SUMMARY
          echo "${SCAN_TRIVY_FILES_RESULTS}"                          >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                                               >> $GITHUB_STEP_SUMMARY
          echo "---"                                                  >> $GITHUB_STEP_SUMMARY
          echo "SCAN_TRIVY_FILES_RESULTS=${SCAN_TRIVY_FILES_RESULTS}" >> ${GITHUB_ENV}

      - name: "Post a comment in a Pull Request with Trivy scan files results"
        id: comment-pr-trivy-files
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Trivy: \`${{ steps.scan-trivy-files.outcome }}\`
            \`\`\`
            ${process.env.SCAN_TRIVY_FILES_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "Fail trivy-files"
        id: quality-gate-trivy-files
        if: steps.scan-trivy-files.outcome != 'success'
        run: exit 1



      ## ---------- BUILD
      - name: "Login to Container Registry"
        id: docker-login-build
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ env.AUTHOR_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: "Set tag for container image"
        id: set-image
        run: |
          if [[ ${{ github.event.ref }} =~ "refs/tags" ]]; then
            TAG_BASE=$(git --no-pager tag -l | sort -nr | head -n1 | tr -d "v")
          else
            TAG_BASE=$(git rev-parse --short HEAD)
          fi
          echo "TAG_VERSION=${TAG_BASE}-${{ env.IMAGE_BASE }}"             >> ${GITHUB_ENV}
          echo "IMAGE_PATTERN=${{ env.IMAGE_BASE }}-${{ env.IMAGE_NAME }}" >> ${GITHUB_ENV}

      - name: "Create build context"
        id: create-build-context
        run: |
          ln -sf ${{ env.SRC_FOLDER }} .build-${{ env.IMAGE_PATTERN }}
          docker context ls | grep builder || docker context create builder

      - name: "Setup Docker Buildx"
        id: setup-buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builder

      - name: "Build container image"
        id: build-image
        uses: docker/build-push-action@v3.2.0
        with:
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          file: .build-${{ env.IMAGE_PATTERN }}/Dockerfile
          context: .build-${{ env.IMAGE_PATTERN }}
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            ${{ env.AUTHOR_USERNAME }}/${{ env.IMAGE_NAME }}:${{env.TAG_VERSION}}
          build-args: |
            IMAGE_MAINTAINER=${{ env.IMAGE_MAINTAINER }}
            IMAGE_VENDOR=${{ env.IMAGE_VENDOR }}

            AUTHOR_NAME=${{ env.AUTHOR_NAME }}
            AUTHOR_USERNAME=${{ env.AUTHOR_USERNAME }}
            AUTHOR_TITLE=${{ env.AUTHOR_TITLE }}
            AUTHOR_EMAIL=${{ env.AUTHOR_EMAIL }}

            LICENSE=${{ env.LICENSE }}
            SCHEMA_VERSION=${{ env.SCHEMA_VERSION }}
            VCS_REF=${{ env.VCS_REF }}
            VCS_URL=${{ env.VCS_URL }}
            BUILD_DATE=${{ env.BUILD_DATE }}

            NAME=${{ env.IMAGE_NAME }}
            VERSION=${{ env.TAG_VERSION}}
            DESCRIPTION=${{ env.IMAGE_DESCRIPTION }}
            USAGE=${{ env.IMAGE_USAGE }}
            URL=${{ env.IMAGE_URL }}

            OS_NAME=${{ env.OS_NAME }}
            OS_VERSION=${{ env.OS_VERSION }}

            DOCKER_CMD=${{ env.DOCKER_CMD }}
            DOCKER_CMD_DEVEL=${{ env.DOCKER_CMD_DEVEL }}
            DOCKER_CMD_TEST=${{ env.DOCKER_CMD_TEST }}
            DOCKER_CMD_DEBUG=${{ env.DOCKER_CMD_DEBUG }}
            DOCKER_CMD_HELP=${{ env.DOCKER_CMD_HELP }}
            DOCKER_PARAMS=${{ env.DOCKER_PARAMS }}

      - name: "Get container image datails"
        id: get-image-details
        run: |
          NEW_IMAGE="${{ env.AUTHOR_USERNAME }}/${{ env.IMAGE_NAME }}:${{env.TAG_VERSION}}"
          IMAGE_LABELS=$(docker inspect ${NEW_IMAGE} | jq ".[].Config.Labels")

          echo "# Image Details"          >> $GITHUB_STEP_SUMMARY
          echo "image: \`${NEW_IMAGE}\`"  >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                   >> $GITHUB_STEP_SUMMARY
          echo "${IMAGE_LABELS}"          >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                   >> $GITHUB_STEP_SUMMARY
          echo "---"                      >> $GITHUB_STEP_SUMMARY



      ## ---------- SCAN-IMAGE
      - name: "Login to Container Registry"
        id: docker-login-trivy
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ env.AUTHOR_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: "Make pull image through harbor"
        id: pull-harbor-image
        run: docker pull ${{ env.AUTHOR_USERNAME }}/${{ env.IMAGE_NAME }}:${{env.TAG_VERSION}}

      - name: "Scan container image via Trivy"
        id: scan-trivy-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.AUTHOR_USERNAME }}/${{ env.IMAGE_NAME }}:${{env.TAG_VERSION}}'
          format: 'table'
          output: '.temp/${{ env.MATRIX_PATH }}/reports/trivy-image.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'

      - name: "Get Trivy Image Scanner results"
        id: get-scan-trivy-image-results
        run: |
          REPORT_FILE=".temp/${{ env.MATRIX_PATH }}/reports/trivy-image.json"
          SCAN_TRIVY_IMAGE_RESULTS=$(jq '.' ${REPORT_FILE})

          echo "# Trivy image scan results
          echo "status: \`${{ steps.scan-triv-files.outcome }}\`      >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                                               >> $GITHUB_STEP_SUMMARY
          echo "${SCAN_TRIVY_IMAGE_RESULTS}"                          >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`"                                               >> $GITHUB_STEP_SUMMARY
          echo "---"                                                  >> $GITHUB_STEP_SUMMARY
          echo "SCAN_TRIVY_IMAGE_RESULTS=${SCAN_TRIVY_IMAGE_RESULTS}" >> ${GITHUB_ENV}

      - name: "Post a comment in a Pull Request with Trivy scan image results"
        id: comment-pr-trivy-image
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Trivy: \`${{ steps.scan-trivy-image.outcome }}\`
            \`\`\`
            ${process.env.SCAN_TRIVY_IMAGE_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "Fail trivy-image"
        id: quality-gate-trivy-image
        if: steps.scan-trivy-image.outcome != 'success'
        run: exit 1



      ## ---------- ARTIFACTS
      - name: "Generate artifacts"
        id: generate-artifacts
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: ${{ env.IMAGE_PATTERN }}-artifacts
          path: |
            !.temp/${{ env.MATRIX_PATH }}/reports/results.*
            .temp/${{ env.MATRIX_PATH }}/reports/results.json
            .temp/${{ env.MATRIX_PATH }}/reports/results.html
            .temp/${{ env.MATRIX_PATH }}/reports/trivy-files.json
            .temp/${{ env.MATRIX_PATH }}/reports/trivy-image.json

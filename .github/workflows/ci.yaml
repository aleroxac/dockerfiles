name: ci



on:
  workflow_dispatch:
  pull_request:
  push:



concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_id }}-${{ github.job }}
  cancel-in-progress: true



env:
  SCHEMA_VERSION: '1.0.0-rc.1'
  IMAGE_VENDOR: 'Groking Labs'
  IMAGE_MAINTAINER: 'acardoso.ti@gmail'



jobs:
  ci:
    runs-on: ubuntu-latest
    name: Build container image
    strategy:
      matrix:
        IMAGE_NAME: [python]
        IMAGE_BASE: [alpine]
        include:
          - IMAGE_NAME:         python
            IMAGE_DESCRIPTION:  'Python image base'
            IMAGE_ARCHITECTURE: 'linux/amd64'
            OS_VERSION:         '3.9.15'
            OS_NAME:            'Alpine Linux'
            KERNEL_VERSION:     '6.0.12-arch1-1'
            BUILD_DATE:         $(TZ="America/Sao_Paulo" date +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF:            $(git rev-parse HEAD)
            VCS_URL:            $(echo https://github.com/aleroxac/dockerfiles/commit/$(git rev-parse HEAD))

    steps:
      ## ---------- SETUP
      - name: "Install requirements"
        id: install-requirements
        run: |
          requirements=('jq:jq' 'gettext-base:envsubst')
          for pkg in "${requirements[@]}"; do
            pkg_name=$(echo ${pkg} | cut -d: -f1)
            bin_name=$(echo ${pkg} | cut -d: -f2)
            which ${bin_name} >/dev/null || sudo apt install -y ${pkg_name}
          done

      - name: "Checkout the code"
        id: checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0



      ## ---------- SCAN-FILES
      ## ----- PREPARE
      - name: "Prepare workspace"
        id: prepare-dockerfile
        run: |
          ## Create temp folder and other folders to can store scan results logs and reports
          WORK_DIR=$(realpath ${PWD})
          SRC_FOLDER="${WORK_DIR}/src/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}"
          TEMP_FOLDER="${WORK_DIR}/.temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}"
          mkdir -p ${TEMP_FOLDER}/{logs,reports}

          ## Compose envfile, replacing shell expansions with its result
          cd ${SRC_FOLDER}
          IMAGE_BASE=$(sed -n 2p Dockerfile | cut -d' ' -f2)
          docker pull -q ${IMAGE_BASE}
          python3 ${WORK_DIR}/scripts/compose-envfile.py ${SRC_FOLDER}/.env > ${TEMP_FOLDER}/.env

          ## Import environment variables from envfile to can be used by envsubst
          source <(sed -r "s/(^[A-Z])/export \1/g" ${TEMP_FOLDER}/.env)

          ## Compose dockerfile, replacing environment variables placeholders with its values by envsubst combined with sed
          cat ${SRC_FOLDER}/Dockerfile | sed "s|\${|'\${|g; s|}|}'|g" | envsubst > ${TEMP_FOLDER}/Dockerfile

          echo "WORK_DIR=${WORK_DIR}"       >> ${GITHUB_ENV}
          echo "SRC_FOLDER=${SRC_FOLDER}"   >> ${GITHUB_ENV}
          echo "TEMP_FOLDER=${TEMP_FOLDER}" >> ${GITHUB_ENV}


      ## ----- HADOLINT
      - name: "Run Hadolint to check dockerfile linting"
        id: scan-hadolint
        uses: hadolint/hadolint-action@v2.1.0
        continue-on-error: true
        with:
          dockerfile: .temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/Dockerfile
          config: scans/ci/hadolint.yaml
          output-file: .temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/reports/hadolint.results

      - name: "Post a comment in a Pull Request with Hadolint results"
        id: comment-pr-hadolint
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Hadolint: \`${{ steps.scan-hadolint.outcome }}\`
            \`\`\`
            ${process.env.HADOLINT_RESULTS}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "Check Hadolint scan results"
        id: quality-gate-hadolint
        if: steps.scan-hadolint.outcome != 'success'
        run: exit 1



      ## ----- KICS
      - name: "Run Kics to check static code analysis"
        id: scan-kics
        uses: checkmarx/kics-github-action@v1.6
        continue-on-error: true
        with:
          path: src
          config_path: scans/ci/kics.yaml

      - name: "Post a comment in a Pull Request with Kics results"
        id: comment-pr-kics
        uses: checkmarx/kics-github-action@v1.6
        if: github.event_name == 'pull_request'
        with:
          path: .temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/reports/kics.json
          config_path: scans/ci/kics.yaml
          token: ${{ secrets.GITHUB_TOKEN }}
          enable_comments: true

      - name: "Check Kics scan results"
        id: quality-gate-kics
        if: steps.scan-kics.outcome != 'success'
        run: exit 1



      ## ----- TRIVY
      - name: "Run Trivy Scanner on repo files"
        id: scan-trivy-files
        uses: aquasecurity/trivy-action@master
        continue-on-error: true
        with:
          scan-ref: '.'
          scan-type: fs
          vuln-type: 'os,library'
          output: '.temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/trivy-files.json'
          security-checks: 'vuln,secret,config'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'

      - name: "Post a comment in a Pull Request with Trivy scan files results"
        id: comment-pr-trivy-files
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Trivy: \`${{ steps.scan-trivy-files.outcome }}\`
            \`\`\`
            $(jq '.' .temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/reports/trivy-files.json}
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "Check Trivy scan files results"
        id: quality-gate-trivy-files
        if: steps.scan-trivy-files.outcome != 'success'
        run: exit 1



      ## ---------- BUILD
      - name: "Login to Container Registry"
        id: docker-login-build
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: "Create build temporary folder"
        id: create-build-folder
        run: |
          [ -d .build ] && rm -rf .build || true
          mkdir .build && cp ${{ env.SRC_FOLDER }}/* .build
          ln -s ${{ env.SRC_FOLDER }} .build-${{matrix.IMAGE_BASE}}-${{matrix.IMAGE_NAME}}

      - name: "Create context for buildx"
        id: create-buildx-context
        run: docker context ls | grep builder || docker context create builder

      - name: "Setup qemu"
        id: setup-qemu
        uses: docker/setup-qemu-action@v2

      - name: "Setup Docker Buildx"
        id: setup-buildx
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
          endpoint: builder
          platforms: |
            linux/amd64
            linux/arm64

      - name: "Setting tag for container image"
        id: set-image
        run: |
          if [[ ${{ github.event.ref }} =~ "refs/tags" ]]; then
            TAG_BASE=$(git --no-pager tag -l | sort -nr | head -n1 | tr -d "v")
          else
            TAG_BASE=$(git rev-parse --short HEAD)
          fi
          echo "TAG_VERSION=${TAG_BASE}-${{matrix.IMAGE_BASE}}" >> ${GITHUB_ENV}

      - name: "Build container image"
        id: build-image
        uses: docker/build-push-action@v3.2.0
        with:
          push: false
          file: .build-${{matrix.IMAGE_BASE}}-${{matrix.IMAGE_NAME}}/Dockerfile
          context: .build-${{matrix.IMAGE_BASE}}-${{matrix.IMAGE_NAME}}
          platforms: |
            linux/amd64
            linux/arm64
          tags: |
            aleroxac/${{matrix.IMAGE_NAME}}:${{env.TAG_VERSION}}
          build-args: |
            SCHEMA_VERSION=${{env.IMAGE_SCHEMA_VERSION}}
            VENDOR=${{env.IMAGE_VENDOR}}
            MAINTAINER=${{env.IMAGE_MAINTAINER}}

            BUILD_DATE=${{env.BUILD_DATE}}
            VCS_REF=${{env.VCS_REF}}
            VCS_URL=${{env.VCS_URL}}

            NAME=${{matrix.IMAGE_NAME}}
            VERSION=${{env.TAG_VERSION}}
            DESCRIPTION=${{matrix.IMAGE_DESCRIPTION}}
            ARCHITECTURE=${{matrix.IMAGE_ARCHITECTURE}}

            OS_NAME=${{matrix.OS_NAME}}
            OS_VERSION=${{matrix.OS_VERSION}}
            KERNEL_VERSION=${{matrix.KERNEL_VERSION}}



      ## ---------- SCAN-IMAGE
      - name: "Login to Container Registry"
        id: docker-login-trivy
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: "Make pull image through harbor"
        id: pull-harbor-image
        run: docker pull aleroxac/${{matrix.IMAGE_NAME}}:${{env.TAG_VERSION}}

      - name: "Scan container image via Trivy"
        id: scan-trivy-image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'aleroxac/${{matrix.IMAGE_NAME}}:${{env.TAG_VERSION}}'
          format: 'table'
          output: '.temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/reports/trivy-image.json'
          severity: 'UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL'
          ignore-unfixed: true
          exit-code: '1'

      - name: "Post a comment in a Pull Request with Trivy scan image results"
        id: comment-pr-trivy-image
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const output = `
            #### Trivy: \`${{ steps.scan-trivy-image.outcome }}\`
            \`\`\`
            $(jq '.' .temp/${{matrix.IMAGE_BASE}}/${{matrix.IMAGE_NAME}}/reports/trivy-image.json)
            \`\`\`
            `;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: "Check Trivy scan image results"
        id: quality-gate-trivy-image
        if: steps.scan-trivy-files.outcome != 'success'
        run: exit 1
